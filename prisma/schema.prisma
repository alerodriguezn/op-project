

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       Int       @id @default(autoincrement())
  apell    String
  name     String
  email    String
  libraries Library[] // Relaci√≥n inversa con el modelo Library
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String  
  description String  
  sinopsis    String  
  genre       String  
  url         String  
  duration    Int     
  rating      Float?  
  releaseDate DateTime
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  librariesMovies LibraryMovie[]     
}

model Song {
  id          Int      @id @default(autoincrement())
  title       String   
  artist      String   
  album       String?  
  genre       String  
  url         String   
  duration    Int      
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt
  librariesSongs LibrarySong[]     
}

model Library {
  id     Int           @id @default(autoincrement())
  name   String
  user   User          @relation(fields: [userId], references: [id])
  userId Int
  movies LibraryMovie[]
  songs  LibrarySong[]
}

model LibraryMovie {
  id        Int     @id @default(autoincrement())
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId Int
  movie     Movie   @relation(fields: [movieId], references: [id])
  movieId   Int
}

model LibrarySong {
  id        Int     @id @default(autoincrement())
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId Int
  song      Song    @relation(fields: [songId], references: [id])
  songId    Int
}
